1. Avec un logiciel comme Detect It Easy (DIE), se rendre compte du fait que le framework .NET a été utilisé, ce qui veut dire qu'on peut utiliser un décompileur comme DotPeek par JetBrain pour avoir le code source.
2. Avec JetBrain, ouvrir l'exécutable (ne PAS utiliser un deobfuscator comme De4dot, car cela ferait en sorte que le pop-up "This challenge works :)" du challenge n'apparait plus... Donc le challenge ne fonctionnerait plus!)
3. Trouver la classe qui contient "using System.Windows.Forms;", qui permet d'utiliser la méthode "MessageBox.Show()" dans une application console. On cherche ça, car on veut trouver l'emplacement du message qui dit: "This challenge works :)". La classe est nommée "KvS55sq8u9uA7eijMk" et est située dans "KaUCnB9kbB36nEvGbe".
4. Trouver la ligne de code qui affiche le message de confirmation que le challenge fonctionne, soit " MessageBox.Show("This challenge works :)"); ".
5. À partir de la ligne de code trouvée précédemment, remonter jusqu'à trouver la condition qui permet d'afficher ce message. On trouve qu'il vérifie si la Length d'une String quelconque est supérieure à 0 (La ligne est: "flag = KvS55sq8u9uA7eijMk.aBy4MPZOx().Length > 0;"). 
6. En remontant à quelle est cette string spécifique trouvée précédemment, on arrive à cette ligne: "str1 = (string) KvS55sq8u9uA7eijMk.abHdlg5DdnUysQKDEm((object) "987456123", KvS55sq8u9uA7eijMk.RpNWo0N9Iml1GcuQxk(KvS55sq8u9uA7eijMk.CZmCBnQLDFeDOAP1Dj(KvS55sq8u9uA7eijMk.qYDJrrfMsHT55Pam5I((object) ((MicrosoftPe.PeHeader) KvS55sq8u9uA7eijMk.aQPtiWCQgKjRCDiOkd((object) microsoftPe)).Sections[4]), KvS55sq8u9uA7eijMk.qYDJrrfMsHT55Pam5I((object) ((MicrosoftPe.PeHeader) KvS55sq8u9uA7eijMk.aQPtiWCQgKjRCDiOkd((object) microsoftPe)).Sections[5]))));".
   On voit que le programme crée un objet "MicrosoftPe.PeHeader". En allant à la déclaration de la classe, on voit que cette classe a une méthode nommée "FromFile" qui utilise la classe "KaitaiStream". En cherchant sur internet, on remarque que la classe KaitaiStream permet, entre autre, de lire des Headers d'un fichier de type exécutable portable (PE executable file).
7. On ouvre le challenge dans le programme CFF Explorer, qui permet, entre autre, de voir les Headers d'un PE. On remarque que l'entête des Headers 5 et 6 sont très très louche... On les copies, on va les utiliser plus tard.
8. Si on retourne à la ligne de code qui contient la string déclarant des objets "MicrosoftPe.PeHeader", en analysant les méthodes obfusqués, on remarque que la méthode "CZmCBnQLDFeDOAP1Dj" effectue une concaténation de String, que la méthode "qYDJrrfMsHT55Pam5I" retourne la propriété "Name" d'un objet "MicrosoftPe.Section". On comprends donc que le programme va lire les Headers d'un exécutable PE (qui est déclaré dans l'objet nommé "microsoftPe") aux index 4 ("((MicrosoftPe.PeHeader) KvS55sq8u9uA7eijMk.aQPtiWCQgKjRCDiOkd((object) microsoftPe)).Sections[4])") et 5 ("((MicrosoftPe.PeHeader) KvS55sq8u9uA7eijMk.aQPtiWCQgKjRCDiOkd((object) microsoftPe)).Sections[5])") et fait une concaténation de ces derniers.
   Logiquement, on a trouvé des Headers suspicieux dans le challenge. On va donc prendre en compte que ce fichier PE est le challenge lui-même (duh). On va donc simplifier notre ligne de code immense avec les deux Headers qu'on a trouvé avec le logiciel CFF Explorer. Notre ligne de code ressemble donc maintenant à ceci: "str1 = (string) KvS55sq8u9uA7eijMk.abHdlg5DdnUysQKDEm((object) "987456123", KvS55sq8u9uA7eijMk.RpNWo0N9Iml1GcuQxk("08010E0C04060002"));".
9. Il reste donc 2 méthodes à comprendre dans notre ligne. Ces méthodes sont "RpNWo0N9Iml1GcuQxk" et "abHdlg5DdnUysQKDEm". La méthode "RpNWo0N9Iml1GcuQxk" appelle elle-même la méthode "IOH93uwt8", qui (après analyse des méthodes, test de la méthode dans un projet custom de visual studio, etc.) est une méthode qui permet de convertir une String en Hexadécimal en ASCII. On effectue donc la conversion avec un outil en ligne, ou avec la méthode elle-même dans le code, et on obtient (dans Visual Studio): "\b\u0001\u000e\f\u0004\u0006\0\u0002"
10. La dernière méthode à analyser est "abHdlg5DdnUysQKDEm" Cette méthode a comme paramètre la string "987456123" et la string trouvée précédemment, "\b\u0001\u000e\f\u0004\u0006\0\u0002". Cette méthode appelle elle-même la méthode "RkZqs5y4B" qui, après analyse, permet de XOR deux String entre elles. Ainsi, avec la méthode dans le code ou un outil en ligne, on XOR "987456123" avec "\b\u0001\u000e\f\u0004\u0006\0\u0002" et on obtient "19981010", soit la date demandé par le challenge. Voilà! :)